openapi: 3.0.2
info:
  title: Imperial Library of Doom
  version: "1.0"
  description: |-
    The Imperial Library of Doom is a library service and reader
    offering both books of academic and fictional nature!

    This document details our API as it is currently planned to
    be built!

    # Usage Policy
    Usage of this service implies acceptance of following:
    - You are not allowed to distribute credentials or access to
      this service, which was explicitly granted to you to any
      other individual.

    # Authentication
    Only whitelisted users will then be able to access the library's
    resources!
    ## OAuth2
    You can login with the `/auth/login` endpoint. There you
    will be redirected to Discord OAuth2 API, which will ask
    you to log in, so that his application knows your:
    - Discord ID
    - Discord Username
    - Discord Discriminator
    - Discord Avatar (as of 09/21/2021 unused)
    ## Local Whitelist
    Apart from the Discord OAuth2 _Authentication_ there is
    also a local whitelist, which is crossreferenced using the
    Discord ID in order to determine, whether the user is permitted
    to use this service.
    The `/api/v1/user/whitelist` and `/api/v1/user/ban/{id}`
    endpoints allow the modification of this local whitelist by
    Administrators.

    # Rate Limits
    The API enforces rate limits to prevent the server from being
    flooded with malicious request in case of a breach in
    authentication. This can only occur if a trusted user of this API
    shares their authentication information with a non-trusted
    outsider. If such case is detected that user account will be
    banned from using this API!

servers:
  - url: 'http://localhost:3000'
    description: 'Local Server'

security:
  - OAuth2:
      - identify

paths:
  /auth/login:
    get:
      summary: Login
      description: |-
        Redirects to Discords OAuth2 Page, where the user will be
        requested to authorize this application to read the Discord
        ID, username and discriminator!
      tags:
        - Authentication
      security: []
      responses:
        '302':
          description: Redirect to Discord OAuth2
  /auth/redirect:
    get:
      summary: OAuth2 Redirect
      description: |-
        Retrieves the Token information from the Discord OAuth2 API
        and stores id, username & discriminator securely in the
        database for future use.
      tags:
        - Authentication
      security: []
      responses:
        '200':
          description: Successful Authentication
        '403':
          description: Forbidden
  /auth/status:
    get:
      summary: Current User
      description: |-
        Obtain the information on the currently logged in user.
      tags:
        - Authentication
      responses:
        '200':
          description: Shallow User Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /auth/logout:
    get:
      summary: Destroy Session
      description: |-
        Destroy the current session by logging out and removing
        the session id from the store.
      tags:
        - Authentication
      responses:
        '200':
          description: Successful Logout
        '401':
          description: Unauthorized
  /api/v1/users:
    get:
      summary: All Users
      description: |-
        Obtain a shallow user list for administration
        purposes
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      tags:
        - User
      responses:
        '200':
          description: Shallow User List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/user/{discordID}/lists:
    parameters:
      - $ref: '#/components/parameters/discordIDParam'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
    get:
      summary: Get User Reading Lists
      description: |-
        Get all user reading list objects. In order
        to avoid huge data transfer only ID's and
        names will be sent!
      tags:
        - Reading List
      responses:
        '200':
          description: Discord Reading Lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingLists'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User Not Found
  /api/v1/user/{discordID}/list:
    parameters:
      - $ref: '#/components/parameters/discordIDParam'
    post:
      summary: Create Reading List
      description: Create Reading list for a User
      tags:
        - Reading List
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingListPayload'
      responses:
        '201':
          description: Reading List Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User Not Found
        '409':
          description: Conflict
  /api/v1/user/{discordID}/list/{id}:
    parameters:
      - $ref: '#/components/parameters/discordIDParam'
      - $ref: '#/components/parameters/idParam'
    get:
      summary: Get Reading List
      description: Get specific reading list from user
      tags:
        - Reading List
      responses:
        '200':
          description: Reading List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingList'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: One or more Resources Not Found
    patch:
      summary: Modify Reading List
      description: |-
        Modify the list's name or add & delete books from
        the reading list.
      tags:
        - Reading List
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadingListPatch'
      responses:
        '200':
          description: Successful Modification
        '201':
          description: Successful Creation
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: One or more Resources Not Found
    delete:
      summary: Delete Reading List
      description: |-
        Deletes the specified reading list
      tags:
        - Reading List
      responses:
        '200':
          description: Successful Deletion
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: One or more Resources Not Found
  /api/v1/subscriptions:
    get:
      summary: Get User Subscriptions
      description: |-
        Gets all subscriptions from a specific user.
      parameters:
        - in: query
          name: user
          schema:
            $ref: '#/components/schemas/DiscordID'
          required: false
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      tags:
        - Subscription
      responses:
        '200':
          description: List of Subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: Bad Request
        403:
          description: Forbidden
        '401':
          description: Unauthorized
  /api/v1/subscription/{discordID}:
    put:
      parameters:
        - $ref: '#/components/parameters/discordIDParam'
      description: Create Subscription
      tags:
        - Subscription
      requestBody:
        description: |-
          Data describing a subscription object
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SubscriptionPayload'
              required:
                - subscriptionType
                - subscription
      responses:
        '201':
          description: Successfully Subscribed
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Suscription Resource Not Found
  /api/v1/subscription/{discordID}/{id}:
    parameters:
      - $ref: '#/components/parameters/discordIDParam'
      - $ref: '#/components/parameters/idParam'
    get:
      summary: Get User Subscription
      description: |-
        Get a specific subscription for a
        specific user.
      tags:
        - Subscription
      responses:
        '200':
          description: 'Successful Subscription Retrieval'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Subscription Not Found
    delete:
      summary: Unsubscribe
      description: |-
        Unsubscribe a user from their subscription
      tags:
        - Subscription
      responses:
        '200':
          description: 'Successfully Unsubscribed'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Subscription Not Found
  /api/v1/user/whitelist:
    post:
      summary: Whitelist User
      description: |-
        Whitelists a user in the database by enabling
        authentication and adding the `READER` role.
      tags:
        - User
      requestBody:
        description: |-
          User Properties in order to properly identify
          the user, which should be whitelisted!
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/DiscordUser'
              required:
                - id
                - username
                - discriminator
      responses:
        '201':
          description: Whitelisted User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    get:
      summary: Whitelist
      description: |-
        Retrieve the Whitelist, which contains exclusively
        enabled users.
      tags:
        - User
      responses:
        '200':
          description: Shallow Whitelist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/user/ban/{discordID}:
    patch:
      summary: Ban User
      description: |-
        Ban the user from accessing the library. This
        action automatically logs out the user and disables
        them from logging back in by disabling their account!  
        This is a security measure, which should be used with
        care!
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/discordIDParam'
      responses:
        '200':
          description: Successfully disabled user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Successfully blacklisted user
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '418':
          description: I'm a Teapot, can't ban this User
  /api/v1/tags:
    get:
      summary: All Tags
      description: |-
        Obtain a shallow tag list, which can be used
        for creating a tag enum or providing a list
        of tags for tag management!
      tags:
        - Library
        - Tag
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Shallow Tag List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /api/v1/tag:
    post:
      summary: Create Tag
      description: |-
        Create a Tag, which can be used within the API
        to categorize literature in easily searchable
        tags.
      tags:
        - Tag
      requestBody:
        description: |-
          Data describing a unique tag, consisting out
          of tag title and tag type.
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TagPayload'
              required:
                - title
                - type
      responses:
        '201':
          description: Tag Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/tag/{id}:
    put:
      summary: Update Tag
      description: Update the tag type or title.
      tags:
        - Tag
      requestBody:
        description: |-
          Data describing a unique tag, consisting out
          of tag title and tag type.
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TagPayload'
              required:
                - title
                - type
      responses:
        '200':
          description: Tag Updated
        '201':
          description: Tag Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      summary: Delete Tag
      description: |-
        Deletes the tag with the specified ID.
      tags:
        - Tag
      responses:
        '200':
          description: Tag Deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Tag Not Found
    parameters:
      - $ref: '#/components/parameters/idParam'
  /api/v1/authors:
    get:
      summary: All Authors
      description: |-
        Obtain a shallow author list, which can be used for an
        author filter or selection during book creation!
      tags:
        - Author
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: Shallow Author List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /api/v1/author:
    post:
      summary: Create Author
      description: |-
        Create an Author, so it can be used during book creation!
      tags:
        - Author
      requestBody:
        description: |-
          Data required to create an author
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AuthorPayload'
              required:
                - firstName
                - lastName
      responses:
        '201':
          description: Created Author
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/v1/author/{id}:
    put:
      summary: Update Author
      description: |-
        Updates the author data
      tags:
        - Author
      requestBody:
        description: |-
          Data used to update the author on the database
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AuthorPayload'
              required:
                - firstName
                - lastName
      responses:
        '200':
          description: Successfully Modified
        '201':
          description: Author Successfully Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    delete:
      summary: Delete Author
      description: |-
        Deletes an Author
      tags:
        - Author
      responses:
        '200':
          description: Successfully Deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Author not Found
    parameters:
      - $ref: '#/components/parameters/idParam'
  /api/v1/series:
    get:
      summary: All Series
      description: |-
        Obtain a list of all series. In order to reduce
        the size of the data, only names and ID's will be
        transferred.
      tags:
        - Series
      responses:
        '200':
          description: List of Series
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SeriesPayload'
                properties:
                  id:
                    description: Series UUID
                    allOf:
                      - $ref: '#/components/schemas/UUID'
        '401':
          description: Unauthorized
  /api/v1/series/{id}:
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      summary: Get Series
      description: |-
        Get Information & Books of a series by
        the series ID.
      tags:
        - Series
      responses:
        '200':
          description: Series Details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Series'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Series Not Found
    patch:
      summary: Edit Series
      description: |-
        Edit the Series.
      tags:
        - Series
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Series'
                - title: SeriesPatch
                  type: object
                  properties:
                    title:
                      description: Series Name
                      type: string
                      example: Lord of the Rings
                    booksDiff:
                      allOf:
                        - $ref: '#/components/schemas/BookDiff'
      responses:
        '200':
          description: Successfully Patched Series
        '201':
          description: Successfully Created Series
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Series Not Found
    delete:
      summary: Delete Series
      description: |-
        Delete a Series given its ID
      tags:
        - Series
      responses:
        '200':
          description: Successfully Deleted
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Series Not Found
  /api/v1/books:
    get:
      summary: All Books
      description: |-
        Receive a list of all books
      tags:
        - Library
        - Book
      responses:
        '200':
          description: List of Books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
  /api/v1/book/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Get Book Data
      description: |-
        Obtain the book data with the provided ID
      tags:
        - Library
        - Book
      responses:
        '200':
          description: Successfully retrieved Book Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Book not found
    
  /api/v1/book/download/{id}:
    parameters:
      - $ref: "#/components/parameters/idParam"
    get:
      summary: Get Book File
      description: |-
        Obtain the book file with the provided ID
      tags:
        - Library
        - Book
      responses:
        '200':
          description: Successfully retrieved Book File
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            # TODO: Add support for more file extensions
        '401':
          description: Unauthorized
        '404':
          description: Book not found
  /api/v1/book:
    post:
      summary: Create Book
      description: |-
        Upload a book and associate it with the appropriate
        tags, authors and series.
      tags:
        - Book
      requestBody:
        description: |-
          Data required to create a book
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              allOf:
                - $ref: '#/components/schemas/BookPayload'
              properties:
                file:
                  type: string
                  description: |-
                    The Book File
                  format: base64
              required:
                - title
                - type
                - format
                - language
                - modifiedBy
                - file
            encoding:
              file:
                contentType: application/pdf
                # TODO: Add more supported encodings
      responses:
        '201':
          description: Created Book
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: One or more Resources Not Found
        '415':
          description: Unsupported Media Type
  /api/v1/search:
    get:
      parameters:
        - in: query
          name: q
          description: Query parameter
          required: true
          schema:
            type: string
            description: Query string
            example: J.R.R. Tolkien
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      summary: Search Resource
      description: |-
        Search Book, Series, Author or User!
      tags:
        - Search
      responses:
        '200':
          description: Resource List
          content:
            application/json:
              schema:
                description: Search Result
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Book'
                    - $ref: '#/components/schemas/Series'
                    - $ref: '#/components/schemas/Author'
                    - $ref: '#/components/schemas/User'
        '204':
          description: Nothing Found
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

components:
  parameters:
    discordIDParam:
      in: path
      name: discordID
      description: 'A Discord ID'
      required: true
      schema:
        $ref: '#/components/schemas/DiscordID'
    idParam:
      in: path
      name: id
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        example: 100
      description: |-
        The number of items to skip before starting
        to collect the desired resource.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        example: 100
      description: |-
        The number of items to return
  schemas:
    DiscordUser:
      title: DiscordUser
      description: 'Discord User'
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DiscordID'
        username:
          type: string
          example: 'イオタ-天才'
        discriminator:
          type: string
          pattern: '\d{4}'
          example: '3316'
    User:
      title: User
      description: 'User Object'
      type: object
      allOf:
        - $ref: '#/components/schemas/DiscordUser'
      properties:
        enabled:
          type: boolean
          default: true
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    UserRole:
      description: 'User Role'
      type: string
      enum:
        - ADMINISTRATOR
        - READER
    Tag:
      title: Tag
      description: 'Literature Tag'
      type: object
      allOf:
        - $ref: '#/components/schemas/TagPayload'
      properties:
        id:
          description: Unique Tag ID (UUIDv4)
          allOf:
            - $ref: '#/components/schemas/UUID'
    TagPayload:
      title: TagPayload
      description: 'Tag Data'
      type: object
      properties:
        title:
          type: string
          example: 'NOVEL'
        type:
          $ref: '#/components/schemas/TagType'
    TagType:
      title: TagType
      description: 'Type of tag'
      type: string
      enum:
        - GENRE
        - SUBJECT
        - TOPIC
        - KEYWORD
    Author:
      title: Author
      description: 'Book Author / Publisher'
      type: object
      allOf:
        - $ref: '#/components/schemas/AuthorPayload'
      properties:
        id:
          description: Unique Author ID (UUIDv4)
          allOf:
            - $ref: '#/components/schemas/UUID'
    AuthorPayload:
      title: AuthorPayload
      description: 'Author Creation/Modification Payload'
      type: object
      properties:
        firstName:
          type: string
          example: 'John Ronald Reuel'
        lastName:
          type: string
          example: 'Tolkien'
    Book:
      title: Book
      description: 'Book'
      type: object
      allOf:
        - $ref: '#/components/schemas/BookPayload'
      properties:
        id:
          description: Unique Book ID (UUIDv4)
          allOf:
            - $ref: '#/components/schemas/UUID'
        createdOn:
          description: Created Timestamp
          type: string
          format: date-time
        createdBy:
          description: (Created By) Librarian ID
          allOf:
            - $ref: '#/components/schemas/DiscordID'
        modifiedOn:
          description: Modified Timestamp
          type: string
          format: date-time
    BookPayload:
      title: BookPayload
      description: 'Data required to create or modify a book!'
      type: object
      properties:
        nsfw:
          type: boolean
          example: false
          default: false
        coverUrl:
          type: string
          description: |-
            An optional thumbnail link. The frontend should use this as the thumbnail
            if provided, otherwise it should attempt to fall back to the first page of
            the book, if possible to retrieve! In case of failure it should display a 
            default placeholder thumbnail.
          example: 'https://static0.colliderimages.com/wordpress/wp-content/uploads/2016/07/the-lord-of-the-rings-book-cover.jpg'
          nullable: true
        title:
          type: string
          example: 'The Lord of the Rings'
        synopsis:
          type: string
          description: |-
            An optional, short and objective summary of the book!
          example: |-
            A young Hobbit known as Frodo has been thrown on an amazing adventure, 
            when he is appointed the job of destroying the One Ring, which was 
            created by the Dark Lord Sauron. He is assigned with three warriors 
            including Gandelf, Aragorn, and Boromir. But it's not going to be an easy 
            journey for the Fellowship of the Ring, on the ultimate quest to rid the 
            Middle-earth of all evil.
          nullable: true
        type:
          allOf:
            - $ref: '#/components/schemas/BookType'
          example: 'NOVEL'
        format:
          allOf:
            - $ref: '#/components/schemas/BookFormat'
          example: 'PDF'
        tags:
          type: array
          description: |-
            Array of Tag UUID's
          items:
            $ref: '#/components/schemas/UUID'
        authors:
          type: array
          description: |-
            Array of Author UUID's
          items:
            $ref: '#/components/schemas/UUID'
        language:
          type: string
          description: |-
            A 3 character language code specified by ISO 639-3.
          example: 'eng'
          pattern: '\w{3}'
        year:
          type: integer
          description: |-
            Publishing Year of the Book
          example: 1954
          nullable: true
        seriesID:
          description: |-
            If the book is part of a series, then the ID of said
            series should be indicated here.
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UUID'
        modifiedBy:
          description: (Created or Modified By) Librarian ID
          allOf:
            - $ref: '#/components/schemas/DiscordID'
    BookFormat:
      title: BookFormat
      description: 'The digital format (extension) of the book'
      type: string
      enum:
        - BZIP
        - CB7
        - CBA
        - CBR
        - CBT
        - CBZ
        - CHM
        - DJVU
        - DOC
        - DOCX
        - EPUB
        - GZIP
        - LIT
        - MOBI
        - PDF
        - RAR
        - RTF
        - TXT
        - ZIP
    BookType:
      title: BookType
      description: 'The electronic publishing format'
      type: string
      enum:
        - MANGA
        - WEBTOON
        - LIGHT_NOVEL
        - WEB_NOVEL
        - COMIC
        - SHORT_STORY
        - POETRY
        - DRAMA
        - NOVEL
        - PAPER
        - DICTIONARY
        - ENCYCLOPEDIA
    Series:
      title: Series
      description: 'The data about a series'
      type: object
      properties:
        id:
          description: The ID of the Series
          allOf:
            - $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: The Lord of the Rings
        books:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Book'
              - description: Book ID
                allOf:
                  - $ref: '#/components/schemas/UUID'
    SeriesPayload:
      title: SeriesPayload
      description: 'The data required to create a Series'
      type: object
      properties:
        name:
          type: string
          example: The Lord of the Rings
    Subscription:
      title: Subscription
      description: |-
        Subscription object carrying information about the
        given users subscription.
      type: object
      properties:
        subscriptionType:
          $ref: '#/components/schemas/SubscriptionType'
        subscription:
          oneOf:
            - $ref: '#/components/schemas/Author'
            - $ref: '#/components/schemas/Series'
    SubscriptionPayload:
      title: SubscriptionPayload
      description: 'Data required to create or modify a user subscription'
      type: object
      properties:
        subscriptionType:
          $ref: '#/components/schemas/SubscriptionType'
        subscription:
          description: |-
            The UUID of the subscription object, which is
            defined more precisely by the `subscriptionType`.
          allOf:
            - $ref: '#/components/schemas/UUID'
    SubscriptionType:
      title: SubscriptionType
      description: 'The type of subscription'
      type: string
      enum:
        - AUTHOR
        - SERIES
    ReadingLists:
      description: Multiple Reading Lists
      type: array
      items:
        properties:
          id:
            description: Reading List ID
            allOf:
              - $ref: '#/components/schemas/UUID'
          name:
            type: string
            example: Modern Literature List
    ReadingList:
      description: Reading List
      type: object
      properties:
        id:
          description: Reading List ID
          allOf:
            - $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: Modern Literature
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    ReadingListPayload:
      description: Reading List Payload
      type: object
      properties:
        name:
          type: string
          example: Fantasy List
    ReadingListPatch:
      description: Reading List Patch
      type: object
      properties:
        name:
          type: string
          example: Modern Fantasy List
        books:
          $ref: '#/components/schemas/BookDiff'
    BookDiff:
      description: Books to delete or add
      type: array
      items:
        type: object
        properties:
          operation:
            description: Operation Type
            type: string
            example: ADD
            enum:
              - ADD
              - REMOVE
          book:
            description: Book ID
            allOf:
              - $ref: '#/components/schemas/UUID'
    DiscordID:
      title: Discord ID
      type: string
      pattern: '\d{18}'
      example: '756757056941326397'
    UUID:
      title: UUID
      type: string
      pattern: '/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i'
      example: '6ce21a9e-f12b-408a-b129-1f3942fadc14'
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://discord.com/api/oauth2/authorize'
          tokenUrl: 'https://discord.com/api/oauth2/token'
          scopes:
            identify: Grants access to id, username, discriminator and avatar
